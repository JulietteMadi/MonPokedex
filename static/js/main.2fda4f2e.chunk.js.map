{"version":3,"sources":["services/networking/request.ts","services/i18n/intl.ts","components/Root/Root.style.ts","components/Root/Root.tsx","components/Root/Root.wrap.ts","routes.tsx","App.tsx","redux/Login/actions.ts","redux/Login/reducer.ts","redux/Login/sagas.ts","redux/sagas.ts","redux/store.js","serviceWorker.js","index.tsx","redux/reducers.ts"],"names":["makeGetRequest","_ref","Object","_Users_surya_Projects_Juliette_pokedex_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_surya_Projects_Juliette_pokedex_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","endpoint","wrap","_context","prev","next","abrupt","request","get","concat","set","stop","_x","apply","this","arguments","makeLoginRequest","data","post","process","send","login","_ref2","_callee2","response","token","_context2","sent","body","access","localStorage","setItem","_x2","_x3","flattenMessages","nestedMessages","prefix","length","undefined","keys","reduce","messages","key","value","prefixedKey","assign","Root_style","Wrapper","styled","div","_templateObject","Header","header","_templateObject2","HeaderWrapper","_templateObject3","Logo","img","_templateObject4","locales","fr","frMessages","en","enMessages","addLocaleData","toConsumableArray","Root","children","react_default","createElement","index_es","locale","src","alt","Home","lazy","__webpack_require__","e","then","bind","routes","react","fallback","react_router","exact","path","component","RootComponentWithRoutes","Root_wrap","src_routes","App","history","persistor","store","es","integration_react","loading","esm","loginUserRequest","createStandardAction","loginUserSuccess","loginUserError","initialState","loginError","reducer","state","typedAction","type","getType","objectSpread","payload","errorMessage","loginUser","loginUserSaga","action","regenerator_default","call","put","t0","message","_marked","takeEvery","_marked2","rootSaga","all","loginSagas","sagas_marked","sagaMiddleware","createSagaMiddleware","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","createBrowserHistory","asyncReducers","middlewares","routerMiddleware","enhancers","applyMiddleware","composeEnhancers","compose","rootReducer","router","connectRouter","combineReducers","persistConfig","whitelist","storage","persistedReducer","persistReducer","createStore","run","runSaga","persistStore","configureStore","rootEl","document","getElementById","ReactDOM","render","src_App","URL","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2fda4f2e.chunk.js","sourcesContent":["import request from 'superagent';\n\nconst backendBaseUrl = process.env.REACT_APP_API_BASE_URL || '';\n\nexport const makeGetRequest = async (endpoint: string) => {\n  return request.get(`${endpoint}`).set('Accept', 'application/json');\n};\n\nexport const makePostRequest = (endpoint: string, data: {}) =>\n  request\n    .post(`${backendBaseUrl}${endpoint}`)\n    .send(data)\n    .set('Accept', 'application/json');\n\nexport const makeLoginRequest = (endpoint: string, data: {}) =>\n  request.post(`${backendBaseUrl}${endpoint}`).send(data);\n\nexport const login = async (endpoint: string, data: {}) => {\n  const response = await makeLoginRequest(endpoint, data);\n  const token: string | undefined = response.body.token || response.body.access;\n  if (token) {\n    localStorage.setItem('token', token);\n  }\n  return token;\n};\n","import keys from 'lodash/keys';\n\ntype Message = string | NestedDictionary;\ninterface NestedDictionary {\n  [x: string]: Message;\n}\ninterface FlattenedDictionary {\n  [x: string]: string;\n}\n\nexport const flattenMessages = (\n  nestedMessages: NestedDictionary,\n  prefix = '',\n): FlattenedDictionary =>\n  keys(nestedMessages).reduce((messages: FlattenedDictionary, key) => {\n    const value = nestedMessages[key];\n    const prefixedKey = prefix ? `${prefix}.${key}` : key;\n\n    if (typeof value === 'string') {\n      messages[prefixedKey] = value;\n    } else {\n      Object.assign(messages, flattenMessages(value, prefixedKey));\n    }\n\n    return messages;\n  }, {});\n\nexport default flattenMessages;\n","import styled from 'styled-components';\n\nexport default {\n  Wrapper: styled.div`\n    height: 100%;\n  `,\n  Header: styled.header`\n    background-color: #ef5350;\n    height: 50px;\n    align-items: center;\n    display: flex;\n    padding: 5px;\n  `,\n  HeaderWrapper: styled.div`\n    flex: 1;\n    max-width: 72rem;\n    margin: auto;\n    display: flex;\n  `,\n  Logo: styled.img`\n    height: 40px;\n  `,\n};\n","import React, { ReactNode } from 'react';\nimport { addLocaleData, IntlProvider } from 'react-intl';\nimport en from 'react-intl/locale-data/en';\nimport fr from 'react-intl/locale-data/fr';\n\nimport { flattenMessages } from 'services/i18n/intl';\nimport enMessages from 'translations/en.json';\nimport frMessages from 'translations/fr.json';\nimport Style from './Root.style';\n\nconst locales = {\n  fr: flattenMessages(frMessages),\n  en: flattenMessages(enMessages),\n};\n\naddLocaleData([...fr, ...en]);\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst Root: React.FunctionComponent<Props> = ({ children }) => (\n  <IntlProvider locale=\"fr\" messages={locales.fr}>\n    <Style.Wrapper>\n      <Style.Header>\n        <Style.HeaderWrapper>\n          <Style.Logo\n            src=\"https://fontmeme.com/permalink/190314/03655fc9c0c5ef371245622978eaa0a7.png\"\n            alt=\"pokemon-go-font\"\n          />\n        </Style.HeaderWrapper>\n      </Style.Header>\n      {children}\n    </Style.Wrapper>\n  </IntlProvider>\n);\n\nexport default Root;\n","import Root from './Root';\n\nexport default Root;\n","import React, { lazy, Suspense } from 'react';\nimport { Route, Switch } from 'react-router';\n\nconst Home = lazy(() => import('./pages/Home'));\n\nconst routes = () => (\n  <Suspense fallback={<div>Loading...</div>}>\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n    </Switch>\n  </Suspense>\n);\n\nexport default routes;\n","import React from 'react';\n\nimport { ConnectedRouter } from 'connected-react-router';\nimport { History } from 'history';\nimport { Provider } from 'react-redux';\nimport { Route } from 'react-router';\nimport { Store } from 'redux';\nimport { Persistor } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport Root from './components/Root';\nimport Routes from './routes';\n\ninterface Props {\n  history: History;\n  persistor: Persistor;\n  store: Store;\n}\n\nconst RootComponentWithRoutes: React.FunctionComponent = () => (\n  <Root>\n    <Routes />\n  </Root>\n);\n\nconst App: React.FunctionComponent<Props> = ({ history, persistor, store }) => (\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <ConnectedRouter history={history}>\n        <Route path=\"/\" component={RootComponentWithRoutes} />\n      </ConnectedRouter>\n    </PersistGate>\n  </Provider>\n);\n\nexport default App;\n","import { createStandardAction } from 'typesafe-actions';\n\nexport const loginUserRequest = createStandardAction('Login/USER_LOGIN_REQUEST')<{\n  username: string;\n  password: string;\n}>();\nexport const loginUserSuccess = createStandardAction('Login/USER_LOGIN_SUCCESS')<{\n  token: string;\n}>();\nexport const loginUserError = createStandardAction('Login/USER_LOGIN_ERROR')<{\n  errorMessage: string;\n}>();\n\nexport default {\n  loginUserRequest,\n  loginUserSuccess,\n  loginUserError,\n};\n","import { ActionType, getType } from 'typesafe-actions';\n\nimport { AnyAction } from 'redux';\nimport { loginUserError, loginUserSuccess } from './actions';\n\nexport type LoginAction = ActionType<typeof loginUserSuccess | typeof loginUserError>;\n\nexport type LoginState = Readonly<{\n  token: string | null;\n  loginError: string | null;\n}>;\n\nconst initialState: LoginState = { token: null, loginError: null };\n\nconst reducer = (state: LoginState = initialState, action: AnyAction) => {\n  const typedAction = action as LoginAction;\n  switch (typedAction.type) {\n    case getType(loginUserSuccess):\n      return {\n        ...state,\n        token: typedAction.payload.token,\n      };\n    case getType(loginUserError):\n      return {\n        ...state,\n        loginError: typedAction.payload.errorMessage,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { call, put, takeEvery } from 'redux-saga/effects';\nimport { login } from 'services/networking/request';\nimport { ActionType, getType } from 'typesafe-actions';\nimport { loginUserError, loginUserRequest, loginUserSuccess } from './actions';\n\nexport function* loginUser(action: ActionType<typeof loginUserRequest>) {\n  const endpoint = `/auth/jwt/create`;\n  try {\n    const token: string | undefined = yield call(login, endpoint, action.payload);\n    if (token) {\n      yield put(loginUserSuccess({ token }));\n    } else {\n      yield put(loginUserError({ errorMessage: 'No token in login response body' }));\n    }\n  } catch (error) {\n    yield put(loginUserError({ errorMessage: error.message }));\n  }\n}\n\nexport default function* loginUserSaga() {\n  yield takeEvery(getType(loginUserRequest), loginUser);\n}\n","import { all } from 'redux-saga/effects';\n\nimport { sagas as loginSagas } from 'redux/Login';\n\n// single entry point to start all Sagas at once\nexport default function* rootSaga() {\n  yield all([loginSagas()]);\n}\n","import { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport createSagaMiddleware from 'redux-saga';\n\nimport createReducer from './reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(history) {\n  const initialState = {};\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  /* eslint-disable no-underscore-dangle */\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      : compose;\n  /* eslint-enable */\n\n  const rootReducer = createReducer({ router: connectRouter(history) });\n  const persistConfig = {\n    key: 'root',\n    whitelist: ['login'],\n    storage,\n  };\n  const persistedReducer = persistReducer(persistConfig, rootReducer);\n\n  const store = createStore(persistedReducer, initialState, composeEnhancers(...enhancers));\n\n  sagaMiddleware.run(rootSaga);\n  store.runSaga = sagaMiddleware.run;\n  store.asyncReducers = {};\n\n  const persistor = persistStore(store);\n\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      import('./reducers').then(reducerModule => {\n        const createReducers = reducerModule.default;\n        const nextReducers = createReducers(store.asyncReducers);\n\n        store.replaceReducer(nextReducers);\n      });\n    });\n  }\n\n  return { store, persistor };\n}\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'babel-polyfill';\nimport { createBrowserHistory } from 'history';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport configureStore from './redux/store';\nimport { register } from './serviceWorker';\n\nconst history = createBrowserHistory();\nconst { store, persistor } = configureStore(history);\n\nconst rootEl = document.getElementById('root');\n\nif (rootEl) {\n  ReactDOM.render(<App history={history} store={store} persistor={persistor} />, rootEl);\n  register();\n}\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default; // eslint-disable-line\n    if (rootEl) {\n      ReactDOM.render(<NextApp history={history} store={store} />, rootEl);\n    }\n  });\n}\n","/**\n * Combine all reducers in this file and export the combined reducers.\n * If we were to do this in store.js, reducers wouldn't be hot reloadable.\n */\n\nimport { LocationChangeAction, RouterState } from 'connected-react-router';\nimport { combineReducers, Reducer } from 'redux';\n\nimport { reducer as login } from './Login';\nimport { RootAction, RootState } from './types';\n\n/**\n * Creates the main reducer with the asynchronously loaded ones\n */\nexport default function createReducer(asyncReducers: {\n  router: Reducer<RouterState, LocationChangeAction>;\n}) {\n  return combineReducers<RootState, RootAction>({\n    ...asyncReducers,\n    login,\n  });\n}\n"],"sourceRoot":""}